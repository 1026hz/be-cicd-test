name: Backend CI/CD - Prod

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '**/README*'

jobs:
  ci:
    name: CI (Build)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Spring Project
        run: ./gradlew build -x test

  cd:
    name: CD (Deploy to EC2 via CodeDeploy)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Spring Project
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set deployment variables
        run: |
          TAG=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          IMAGE_TAG=prod-${SHORT_SHA}-${TAG}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t ${{ secrets.ECR_REPO_BE }}:$IMAGE_TAG -t ${{ secrets.ECR_REPO_BE }}:prod .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.ECR_REPO_BE }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPO_BE }}:prod

      - name: Save image info to JSON
        run: |
          echo "{\"imageTag\":\"$IMAGE_TAG\", \"ecrRepo\":\"${{ secrets.ECR_REPO_BE }}\", \"awsRegion\":\"${{ secrets.AWS_REGION }}\"}" > deploy/imageDetail.json

      - name: Confirm imageDetail.json
        run: cat deploy/imageDetail.json

      - name: Zip deployment bundle
        run: |
          cd deploy
          zip -r ../be-deploy.zip appspec.yml scripts imageDetail.json

      - name: Upload bundle to S3
        run: aws s3 cp be-deploy.zip s3://${{ secrets.CODEDEPLOY_S3_BUCKET }}/be/be-deploy.zip

      - name: Deploy via CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --s3-location bucket=${{ secrets.CODEDEPLOY_S3_BUCKET }},key=be/be-deploy.zip,bundleType=zip \
            --region ${{ secrets.AWS_REGION }}


  notify:
    name: Discord Notification
    needs: [ci, cd]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Send Discord Notification
        run: |
          if [ "${{ needs.ci.result }}" = "success" ]; then
            CI_STATUS="‚úÖ CI ÏÑ±Í≥µ"
            CI_COLOR=5763719
          else
            CI_STATUS="‚ùå CI Ïã§Ìå®"
            CI_COLOR=15158332
          fi

          if [ "${{ needs.cd.result }}" = "success" ]; then
            CD_STATUS="‚úÖ CD ÏÑ±Í≥µ"
            CD_COLOR=3066993
          else
            CD_STATUS="‚ùå CD Ïã§Ìå®"
            CD_COLOR=15158332
          fi

          if [ "${{ needs.ci.result }}" = "failure" ] || [ "${{ needs.cd.result }}" = "failure" ]; then
            COLOR=15158332
          else
            COLOR=3066993
          fi

          curl -X POST -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"üîî GitHub Actions Í≤∞Í≥º: ${{ github.workflow }}\",
                \"description\": \"${CI_STATUS}\n${CD_STATUS}\nÎ∏åÎûúÏπò: \`${{ github.ref_name }}\`\nÏª§Î∞ã: \`${{ github.actor }}\`\n[üëâ Ïã§Ìñâ Î°úÍ∑∏ Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                \"color\": ${COLOR}
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}