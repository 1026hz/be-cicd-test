name: Backend CI/CD - Develop

on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]

jobs:
  ci:
    name: CI (Build & Lint)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Lint (Checkstyle)
        run: ./gradlew checkstyleMain checkstyleTest

      - name: Build (Gradle)
        run: ./gradlew build

  cd:
    name: CD (Deploy to EC2 via SSM)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Spring Boot app
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_BE }}

      - name: Build & Push Docker image
        run: |
          IMAGE_URI=${{ secrets.ECR_REPO_BE }}:dev
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Deploy to EC2 via SSM
        run: |
          IMAGE_URI=${{ secrets.ECR_REPO_BE }}:dev
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "GitHub Actions Î∞∞Ìè¨" \
            --instance-ids ${{ secrets.SSM_INSTANCE_TAG }} \
            --parameters commands='[
              "docker stop backend-app || true",
              "docker rm backend-app || true",
              "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin '${{ secrets.ECR_REPO_BE }}'",
              "bash -c '\''\
            KEYS=\"DISCORD_ERROR_WEBHOOK_URL JWT_SECRET MYSQL_URL MYSQL_PASSWORD COOKIE_DOMAIN EMAIL EMAIL_PASSWORD BUCKET_NAME AWS_ACCESS_KEY AWS_SECRET_KEY AI_SERVER_URL\"; \
            DOCKER_ENV_ARGS=\"\"; \
            for KEY in $KEYS; do \
              VALUE=$(aws ssm get-parameter --name \"/kakaobase/dev/$KEY\" --with-decryption --region ap-northeast-2 --query \"Parameter.Value\" --output text); \
              DOCKER_ENV_ARGS=\"$DOCKER_ENV_ARGS -e $KEY=$VALUE\"; \
            done; \
            echo \"Launching with SPRING_PROFILES_ACTIVE=dev and envs: $DOCKER_ENV_ARGS\"; \
            docker run -d --name backend-app \
              -e SPRING_PROFILES_ACTIVE=dev $DOCKER_ENV_ARGS -p 8080:8080 ${IMAGE_URI}\
            '\''"
            ]' \
            --region ap-northeast-2 \
            --timeout-seconds 600

  notify:
      name: Discord Notification
      if: always()
      needs: [ ci, cd ]
      runs-on: ubuntu-latest

      steps:
        - name: Send Discord Notification
          run: |
            CI_RESULT="${{ needs.ci.result || 'skipped' }}"
            CD_RESULT="${{ needs.cd.result || 'skipped' }}"
  
            COLOR="8359053"
            STATUS="‚ö™ CI/CD Ïã§ÌñâÎê®"
  
            if [ "$CI_RESULT" = "success" ]; then
              STATUS="‚úÖ PRÏö© CI ÏÑ±Í≥µ"
              COLOR="5763719"
            elif [ "$CI_RESULT" = "failure" ]; then
              STATUS="‚ùå PRÏö© CI Ïã§Ìå®"
              COLOR="15158332"
            fi
  
            if [ "$CD_RESULT" = "success" ]; then
              STATUS="‚úÖ PushÏö© CD ÏÑ±Í≥µ"
              COLOR="3066993"
            elif [ "$CD_RESULT" = "failure" ]; then
              STATUS="‚ùå PushÏö© CD Ïã§Ìå®"
              COLOR="15158332"
            fi
  
            curl -X POST -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"üîî GitHub Actions Í≤∞Í≥º: ${{ github.workflow }}\",
                  \"description\": \"$STATUS\nÎ∏åÎûúÏπò: \`${{ github.ref_name }}\`\nÏª§Î∞ã: \`${{ github.actor }}\`\n[üëâ Ïã§Ìñâ Î°úÍ∑∏ Î≥¥Í∏∞](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                  \"color\": $COLOR
                }]
              }" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
  
  
